// Commands used in the Born2beroot project

su -> go to /root
apt install sudo -> installing sudo packages
sudo addgroup <groupname> -> create a group
sudo adduser <user> <group> -> add a user to a group
sudo apt update -> search for sudo update packages
sudo apt install openssh-server -> install ssh server packages
sudo service ssh status -> check ssh server status
sudo apt install vim -> install vim packages
(su) vim /etc/ssh/sshd_config -> modifying port to '4242' and PermitRootLogIn to 'no'
(su) vim /etc/ssh/ssh_config -> modifying port to '4242'
sudo service ssh restart -> restart the ssh service
sudo apt install ufw -> installing firewall packages for easy setup
sudo ufw enable -> activate ufw
sudo ufw allow 4242 -> opening 4242 port on the firewall
sudo ufw status -> check the firewall status
touch /etc/sudoers.d/sudo_config -> set up sudo policies in sudoers.d
mkdir /var/log/sudo -> crating a folder in which to store the input and output log from sudoers user
vim /etc/sudoers.d/sudo_config -> setting up sudo policies ad Defaulst rules
/*
Defaults  passwd_tries=3
Defaults  badpass_message="Mensaje de error personalizado"
Defaults  logfile="/var/log/sudo/sudo_config"
Defaults  log_input, log_output
Defaults  iolog_dir="/var/log/sudo"
Defaults  requiretty
Defaults  secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"

ðŸŸ© GREEN -> Total tries for entering the sudo password.

ðŸŸ¥ RED -> The message that will show when the password failed.

ðŸŸ¨ YELLOW -> Path where will the sudo logs will be stored.

ðŸŸ¦ BLUE -> What will be logged.

ðŸŸ« BROWN -> TTY is required lol.

ðŸŸª PURPLE -> Folders that will be excluded of sudo
*/

vim /etc/login.defs -> modifying the passwd expiration settings
sudo apt install libpam-pwquality -> packages for password rules
vim /etc/pam.d/common-password -> update password rules

/*
minlen=10
ucredit=-1
dcredit=-1
lcredit=-1
maxrepeat=3
reject_username
difok=7
enforce_for_root

minlen=10 âž¤ The minimun characters a password must contain.

ucredit=-1 âž¤ The password at least have to contain a capital letter. We must write it with a - sign, as is how it knows that's refering to minumum caracters; if we put a + sign it will refer to maximum characters.

dcredit=-1 âž¤ The passworld at least have to containt a digit.

lcredit=-1 âž¤ The password at least have to contain a lowercase letter.

maxrepeat=3 âž¤ The password can not have the same character repited three contiusly times.

reject_username âž¤ The password can not contain the username inside itself.

difok=7 âž¤ The password it have to containt at least seven diferent characters from the last password ussed.

enforce_for_root âž¤ We will implement this password policy to root.
*/

once opened the port we can connect with: ssh <user>@localhost -p 4242 -> connect the virtual machine with 4242 port open

writing a script to see all it's going on in the machine
/*
uname -a -> all machine info, exept the cpu if it is unknown 
grep "physical id" /proc/cpuinfo | wc -l -> 'grep' looks insede the /proc folder, the 'cpuinfo' file and search for the 'physical id' to show the number of physical cores. the wc -l flag return the lines of the grep output
grep processor /proc/cpuinfo | wc -l -> as before, 'grep' the 'virtual' core of the processor
awk -> acts like a filter to select which thing we want to see
free -> show the 'RAM' memory. with 'awk' we can see the used memory
free --mega | awk '$1 == "Mem:" {print $3}' -> compare if the first word of a row is equal to "Mem:" we will print the third word of that row, which will be the used memory
free --mega | awk '$1 == "Mem:" {print $2}' -> obtai the total memory
free --mega | awk '$1 == "Mem:" {printf("(%.2f%%)\n", $3/$2*100)}' -> calculate the '%' used memory ('%.2f' gives only 2 decimal, '%%' is to show a '%' ofc, the last is the % fromula)
df -> show the occupied and aviable memory of the disk ('df' is 'disk filesystem')
df -m | grep "/dev/" | grep -v "/boot" | awk '{memory_use += $3} END {print memory_use}' -> ('-m' is to see the size in megabyte, 'grep' to search in /dev/, 'grep -v' to exclude linse that contain /boot, 'awk' to see the used space and '+' to sum. we sum the third words of each line)
df -m | grep "/dev/" | grep -v "/boot" | awk '{memory_result += $2} END {printf("%.0fGb\n"), memory_result/1024}' -> obtain the total space ('$2') in Gb ('/1024') with no float ('%.0f).
df -m | grep "/dev/" | grep -v "/boot" | awk '{use += $3} {total += $2} END {printf("(%d%%)\n"), use/total*100}' -> show % of the used memory
vmstat -> show system statistics
vmstat 1 4 | tail -1 | awk '{print $15}' -> in an interval from '1' to '4' sec, show only the last line (tail -1) and only the 15th word ('awk {print $15}')
who -> to see the date and time o four last restart. ('-b') To see the time of the last system boot on screen
who -b | awk '$1 == "system" {print $3 " " $4}' -> to only show the date and time of last system reboot
lsblk -> show us all info about all block device (hard drive, SSDs, memories, etc...)
if [ $(lsblk | grep "lvm" | wc -l) -gt 0 ]; then echo yes; else echo no; fi -> command print yes id LVMGroup is present on system block device, no otherwise
ss -> To check the number of established TCP connections
 
sudo crontab -u root -e -> making the script run every 'x' time per day/hour/minute/sec

